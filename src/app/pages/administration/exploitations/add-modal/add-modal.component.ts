import { Component, ElementRef, Input, OnInit, OnDestroy, Output, EventEmitter, ViewEncapsulation, OnChanges } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ExploitationService } from 'app/_services/exploitation.service';


import { PopupService } from './popup.service';
@Component({
  selector: 'ngx-add-modal',
  templateUrl: './add-modal.component.html',
  styleUrls: ['./add-modal.component.scss'],
  encapsulation: ViewEncapsulation.None,
  
})
export class AddModalComponent implements OnDestroy , OnChanges,OnInit{

@Input() id: string;
@Input() jeojsonExp;
@Input() expEdit;
@Input() geojsonPOarcelle;
@Input() messageError;
isPlantation = false;
isAnnuel = true;
@Output() geojson = new EventEmitter();
@Output() geoParcelle = new EventEmitter();
@Output() ressayerAgain = new EventEmitter();
regions: any = [];
province: any = [];
  selectedIprvince;
    selectedIRegeion;
cultures: any = [];

//   @Input() exp;
//  @Output() updateExp = new EventEmitter(); 
 element: any;
  constructor( private route: ActivatedRoute,private router: Router, private el: ElementRef,private modalService: PopupService,private option: ExploitationService) {
      this.element = this.el.nativeElement;
  }

  ressayer(){
    console.log("ressayer");
   }

  getProvance(region){
      this.option.provance(region).subscribe(prov=> {
        console.log(prov);
        this.province = prov;
        this.selectedIprvince = this.province[0].nom_province;
      })
  }

  editExp(event){
    event = JSON.parse(JSON.stringify(event))
    console.log(event.properties);
    this.option.editExploitation(event.properties.id_exploitation,event.properties.matricule).subscribe(res=>{
    console.log(res);
    this.element.style.display = 'none';
    document.body.classList.remove('ngx-add-modal-open');
})
}
  getRegeion(){
      this.option.regeion().subscribe(reg=>{
          console.log(reg)
          this.regions = reg;
          this.selectedIRegeion = this.regions[0].region;
      })
  }
  selectRegion(event){
      console.log(event)
      this.jeojsonExp.properties.region = event;
      this.getProvance(event);
  }
  selectProvance(event){
    console.log(event)
    this.jeojsonExp.properties.province = event;
    console.log(this.jeojsonExp);
}
selectTypeCuture(type){
    this.geojsonPOarcelle.properties.type_culture = type;
    if(type == "plantation"){
      this.isPlantation = true;
      this.isAnnuel = false;
    }else{
      this.isPlantation = false;
      this.isAnnuel = true;
    }
this.getCulture(type);
}
selectTypeSol(typeSol){
    this.geojsonPOarcelle.properties.type_sol = typeSol;
console.log(typeSol);
}
selectCulture(culture){
    this.geojsonPOarcelle.properties.culture = culture;
}
getCulture(type){
this.option.culture(type).subscribe(culture=>{
    console.log(culture);
    this.cultures = culture;

})
}
dateFrom(date){
console.log(date);
this.geojsonPOarcelle.properties.date_debut = date;
}
dateTo(date){
    console.log(date);
    this.geojsonPOarcelle.properties.date_fin = date;
}
  ngOnInit(){
   
  
this.getRegeion();
      this.jeojsonExp = {
        properties:{
            superficie: 0
        }
      }
  }
goToparcelle(geo){
    // this.router.navigate(['/pages/Adminstrator/addParcelle', geo]);
     this.geojson.emit(geo)
     this.element.style.display = 'none';
     document.body.classList.remove('ngx-add-modal-open');
}

ajouterParcelle(event){
this.geoParcelle.emit(event);
console.log(event);
this.element.style.display = 'none';
document.body.classList.remove('ngx-add-modal-open');
}

  ngOnChanges(): void {
    
    
      
      if (!this.id) {
          console.error('modal must have an id');
          return;
      }

     // move element to bottom of page (just before </body>) so it can be displayed above everything else
      document.body.appendChild(this.element);

      // close modal on background click
      this.element.addEventListener('click', el => {
          if (el.target.className === 'ngx-add-modal') {
               this.close();
          }
      });

      //add self (this modal instance) to the modal service so it's accessible from controllers
      this.modalService.add(this);
  }
  closeModal(){
    this.element.style.display = 'none';
    document.body.classList.remove('ngx-add-modal-open');
  }


  // remove self from modal service when component is destroyed
  ngOnDestroy(): void {
   // debugger
      this.modalService.remove(this.id);
      this.element.remove();
  }

  // open modal
  open(): void {
    
      this.element.style.display = 'block';
      document.body.classList.add('ngx-add-modal-open');
  }

//   // close modal
  close(): void {
      this.element.style.display = 'none';
      document.body.classList.remove('ngx-add-modal-open');
  }
  submitExp(exp){

  }
 

}
