
import { ActivatedRoute } from '@angular/router';
import { Component, Input, OnChanges, OnInit, Output } from '@angular/core';

 import '../../../../../../node_modules/leaflet-fullscreen/dist/Leaflet.fullscreen.js';
 import '../../../../../../node_modules/leaflet.browser.print/dist/leaflet.browser.print.min.js';
 import '../../../../../../node_modules/leaflet.coordinates/dist/Leaflet.Coordinates-0.1.5.src.js';
 import '../../../../../../node_modules/leaflet.fullscreen/Control.FullScreen.js';




import { ParcelleService } from 'app/_services/parcelle.service';

import { CapteureService } from 'app/_services/capteure.service';
import { AlertesService } from 'app/_services/alertes.service';
import { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';
import 'leaflet';
import { DrawEvents, featureGroup, FeatureGroup, icon, latLng, tileLayer } from 'leaflet';
import { ExploitationService } from 'app/_services/exploitation.service.js';







declare let L;


import 'leaflet-measure';

import 'leaflet-search'

import 'leaflet-contextmenu'
import { mapTo } from 'rxjs/operators';






// import * as geotiff from 'leaflet-geotiff/leaflet-geotiff';
// import * as plotty from 'leaflet-geotiff/leaflet-geotiff-plotty';



// import 'leaflet';
// import 'plotty';
// import GeoTIFF from 'geotiff';
// import 'geotiff-layer-leaflet/dist/geotiff-layer-leaflet';
// import 'geotiff-layer-leaflet/src/geotiff-layer-leaflet-plotty';
// import 'geotiff-layer-leaflet/src/geotiff-layer-leaflet-vector-arrows';




import * as LeafletGeotiff from "leaflet-geotiff";
import "leaflet-geotiff/leaflet-geotiff-plotty";
import "leaflet-geotiff/leaflet-geotiff-vector-arrows";
import { getUniqueXDomainValues } from '@swimlane/ngx-charts';

// import { PopupService } from '../add-modal/popup.service';
import { EventEmitter } from 'events';



@Component({
  selector: 'ngx-draw-parcelle',
  templateUrl: './draw-parcelle.component.html',
  styleUrls: ['./draw-parcelle.component.scss']
})
export class DrawParcelleComponent implements OnInit {
geoExp;

DataCapteurs : any[] = []



editableLayers = new L.FeatureGroup();
map : L.Map
TemperatureIcon: string;
HumidityIcon: string;
LightIcon: string;
SoilTemperatureIcon: string;
SoilHumidityIcon: string;
SoilConductivityIcon: string;
UltrasonicLevelIcon: string;
new: any[] = []
data : any;

  constructor(private route: ActivatedRoute,) { }

  ngOnInit(): void {
  //   this.route.paramMap.subscribe( params =>
  //     this.geoExp = params.get('id')
  // )

   this.route.queryParams.subscribe(params=> {
     this.data = params;
     
     console.log(this.data)
   })
   

  
  }
  json;
 
 
  drawnItems: FeatureGroup = featureGroup();
   
  options = {
    layers: [
     L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}&hl=ar-MA&gl=MA',{
       subdomains:['mt0','mt1','mt2','mt3']
     })
    ],
   zoom: 5,
   center: [ 31.791702,  -7.09262 ],
   contextmenu: true,
   contextmenuWidth: 140,
     // contextmenuItems: [{
     //     text: 'Show coordinates',
     //     callback: this.showCoordinates
     // }, {
     //     text: 'Center map here',
     //     callback: this.centerMap
     // }, '-', {
     //     text: 'Zoom in',
     //     callback: this.zoomIn
     // }, {
     //     text: 'Zoom out',
     //     // icon: 'images/zoom-out.png',
     //     callback: this.zoomOut
     // }]
  };
 
 
 
 
 public showCoordinates(e: any) {
   alert(e.latlng);
 }
 
 
 public centerMap(e: any) {
   alert("centerMap")
   this.map.panTo(e.latlng);
 }
 
 public zoomIn(e: any) {
   alert("zoomIn")
 
   this.map.zoomIn();
 }
 
 
 public zoomOut(e: any) {
   alert("zoomOut")
 
   this.map.zoomOut();
 }
 
 public inExploitation(e: any) {
   alert("inExploitation");
 }
 
 public inParcelle(e: any) {
   alert("inParcelle");
 }
 
 public inCapteur(e: any) {
   alert("inCapteur");
 }
 
 
 //  onDrawCreated(e: any) {
 //   const { layerType, layer } = e;
 //   if (layerType === "polygon") {
 //     const polygonCoordinates = layer._latlngs;
 //     console.log(polygonCoordinates);
 //     alert(polygonCoordinates)
 //   }
 //     this.drawnItems.addLayer(e.layer);
 //   }
 
 drawOptions = {
   position: 'topleft',
   draw: {
     polygon: true,
     marker: false,
     polyline: false,
     rectangle: false,
     circle: false,
     circlemarker: false,
   },
   edit: {
    featureGroup: this.drawnItems,
    remove: false
  }
   // draw: false,
   // edit: {featureGroup: this.editableLayers, remove: false}
 };
 
 drawLocal: any = {
   draw: {
     toolbar: {
       buttons: {
         polygon: 'Draw an awesome polygon!'
       }
     }
   }
 };


 public onDrawCreated(e: any) {
 
   // alert('Draw Created Event!')
   this.drawnItems.addLayer((e as DrawEvents.Created).layer);
 
   const { layerType, layer } = e;
 
   // if (layerType === "polygon") {
   //   var polygonCoordinates = layer._latlngs;
   //   // console.log(polygonCoordinates);
   //   alert(polygonCoordinates)
   // }
   let seeArea1 = L.GeometryUtil.geodesicArea(layer.getLatLngs()[0]);
   //this.seeArea = seeArea1/10000;
  //  console.log(this.seeArea);
   //alert(seeArea/10000)
    var geoj = layer.toGeoJSON();
   geoj.properties.id_exploitation= 23;
   geoj.properties.matricule= "exp23";
   geoj.properties.x= 7,40444;
   geoj.properties.y= 7,55456;
   geoj.properties.region= "souss massa";
   geoj.properties.superficie= seeArea1/10000;
   console.log(JSON.stringify(geoj))
  //  alert(JSON.stringify(jeojson))
   layer.addTo(this.map)
  
   // this.drawnItems.addLayer(e.layer);
   
  
 
   // const layer = (e as DrawEvents.Created).layer;
   // this.drawnItems.addLayer(layer);
 }
 
 public onDrawStart(e: any) {
    //alert('Draw Started Event!')
 }
 onMapReady(map: L.Map) {
  this.map = map




  L.control.fullscreen({
       position: 'topleft', // change the position of the button can be topleft, topright, bottomright or bottomleft, defaut topleft
       title: 'Show me the fullscreen !', // change the title of the button, default Full Screen
       titleCancel: 'Exit fullscreen mode', // change the title of the button when fullscreen is on, default Exit Full Screen
       content: null, // change the content of the button, can be HTML, default null
       forceSeparateButton: true, // force seperate button to detach from zoom buttons, default false
       forcePseudoFullscreen: true, // force use of pseudo full screen even if full screen API is available, default false
       fullscreenElement: false // Dom element to render in full screen, false by default, fallback to map._container
     }).addTo(map);



 map.on('enterFullscreen', () => map.invalidateSize());
 map.on('exitFullscreen', () => map.invalidateSize());

L.control.browserPrint({
  title: 'Imprimer la carte',
  printModesNames: {
    Portrait: 'Portrait',
    Landscape: 'Paysage',
    Auto: 'Auto',
    Custom: 'Séléctionnez la zone'
  }
}).addTo(map);
L.control.coordinates().addTo(map);



var measureControl = L.control.measure(
  {
      measureControl: true,
      position: 'topleft',
      primaryAreaUnit: 'hectares',
      activeColor: '#ABE67E',
      completedColor: '#C8F2BE',
      popupOptions: { className: 'leaflet-measure-resultpopup', autoPanPadding: [10, 10] },
      captureZIndex: 10000,
      labels: { "label": "Label translation" }
    }

);
measureControl.addTo(map);



var exploitation
var exploitationsList = []
var exploitationsGroupe
var exploitationsListgroupe=[]

  // this.teest = json.features

  exploitation = L.geoJSON(this.data, {
    // onEachFeature: (feature, layer) => {

    //   // if(feature.properties.id_exploitation == '99'){
    //   //   var imageBounds = layer.getBounds();
    //   //   var imageUrl = '../../../../../assets/images/Albedo_parcelle.png';
    //   //   var imageLayer = L.imageOverlay(imageUrl,imageBounds).addTo(map);
    //   // }


    //   let popupContent = `<p> id_exploitation: ${feature.properties.id_exploitation}</p>
    //   <p> region: ${feature.properties.region}</p>`;
    //   layer.bindPopup(popupContent);

    style: function (feature) {
      return {
        color: '#000',
        fillOpacity : 0
      };
    }
   
  }).addTo(map);

  map.fitBounds(exploitation.getBounds());
  // this.exploitations = exploitation
  // this.exploitations = L.layerGroup(exploitationsList)
  // this.exploitations = exploitationsList


  exploitationsGroupe = L.layerGroup(exploitationsListgroupe);









var wmsLayer = L.tileLayer.wms('http://localhost:8080/geoserver/fadwa/wms', { 
  layers: 'raster5001',
  format: 'image/png',
  transparent: true,
  // styles:'ETc_palette',
}).addTo(map);
 
  setTimeout(function ggg() {

    var googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}&hl=ar-MA&gl=MA',{
      subdomains:['mt0','mt1','mt2','mt3']
    });
    var googleHybrid = L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}&hl=ar-MA&gl=MA',{
      subdomains:['mt0','mt1','mt2','mt3']
    });

    var googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}&hl=ar-MA&gl=MA',{
      subdomains:['mt0','mt1','mt2','mt3']
    });

    var googleTerrain = L.tileLayer('http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}&hl=ar-MA&gl=MA',{
      subdomains:['mt0','mt1','mt2','mt3']
    });
    var baseMaps = {
      "Open Street Map" : googleStreets,
      "Hybrid" : googleHybrid,
      "satellite" : googleSat,
      "Terrain" : googleTerrain
    };


    var overlayMaps = {};
  



    L.control.layers(baseMaps,overlayMaps).addTo(map);





  }, 4000)


map.attributionControl.addAttribution('agroconcept');

}

}
